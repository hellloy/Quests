@page "/quest/edit/{Id:int}"
@page "/quest/edit"


@using Quests.Shared
@using Quests.Client.Services
@using BlazorInputFile
@using System.IO

@inject IJSRuntime JsRuntime
@inject IQuestDataService QuestDataService



<div class="card card-custom gutter-b example example-compact">
    <div class="card-header">
        <h3 class="card-title">Редактирование Квеста</h3>
        <div class="card-toolbar">
            <div class="example-tools justify-content-center">

            </div>
        </div>
    </div>
    <!--begin::Form-->
    <EditForm Model="_quest" class="form" OnValidSubmit="@HandleValidSubmit">
        <div class="card-body">
            <div class="mb-15">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group row">

                    <input type="hidden" @bind-value="@_quest.Id" />

                    <label class="col-lg-3 col-form-label">Название:</label>
                    <div class="col-lg-6">
                        <InputText class="form-control" placeholder="Название" @bind-Value="_quest.Name" />
                        <span class="form-text text-muted">Введите название квеста</span>
                        <ValidationMessage For="@(() => _quest.Name)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Город:</label>
                    <div class="col-lg-6">
                        <InputText type="text" class="form-control" placeholder="Город" @bind-Value="_quest.City" />
                        <span class="form-text text-muted">Введите город где будет проходить квест</span>
                        <ValidationMessage For="@(() => _quest.City)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Описание квеста:</label>
                    <div class="col-lg-6">
                        <InputText type="text" class="summernote" placeholder="Описание:" @bind-Value="_quest.Description" />
                        <span class="form-text text-muted">Введите описание квеста</span>
                        <ValidationMessage For="@(() => _quest.Description)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Изображение:</label>
                    <div class="col-lg-6">
                        <InputImageCropper  @bind-Image="@_quest.Img"></InputImageCropper>
                        <ValidationMessage For="@(() => _quest.Img)" />
                    </div>
                </div>
               

                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Цена:</label>
                    <div class="col-lg-2">
                        <InputNumber class="form-control" placeholder="Цена" @bind-Value="_quest.Price" />
                        <span class="form-text text-muted">Введите цену квеста</span>
                        <ValidationMessage For="@(() => _quest.Price)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Дистанция в метрах:</label>
                    <div class="col-lg-2">
                        <InputNumber class="form-control" placeholder="Цена" @bind-Value="_quest.Distance" />
                        <span class="form-text text-muted">Дистанция в метрах</span>
                        <ValidationMessage For="@(() => _quest.Distance)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Общее время прохождения:</label>
                    <div class="col-lg-2">
                        
                        <input class="form-control" placeholder="Общее время прохождения" type="time" bind="@TimeProxy"/>
                        <span class="form-text text-muted">Введите общее время прохождения</span>
                        <ValidationMessage For="@(() => _quest.TravelTime)"/>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Код карты (Iframe):</label>
                    <div class="col-lg-6">
                        <InputTextArea class="form-control" placeholder="HTML Iframe" type="time" @bind-Value="_quest.MapCode" />
                        <span class="form-text text-muted">Вставьте код IFRAME </span>
                        <ValidationMessage For="@(() => _quest.MapCode)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Код видео (Iframe):</label>
                    <div class="col-lg-6">
                        <InputTextArea class="form-control" placeholder="HTML Iframe" type="time" @bind-Value="_quest.VideoCode" />
                        <span class="form-text text-muted">Вставьте код IFRAME </span>
                        <ValidationMessage For="@(() => _quest.VideoCode)" />
                    </div>
                </div>

            </div>


        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col-lg-3"></div>
                <div class="col-lg-6">
                    <button type="submit" class="btn btn-success mr-2">Сохранить</button>
                    <button type="reset" class="btn btn-secondary">Отмена</button>
                </div>
            </div>
        </div>
    </EditForm>
    <!--end::Form-->

</div>








@code {

    [Parameter]
    public int Id { get; set; }

    private TimeSpan _time = TimeSpan.FromHours(0);

    private Quest _quest = new Quest();


    private string TimeProxy
    {
        get => _quest.TravelTime.ToString();
        set
        {
            TimeSpan.TryParse(value, out _time);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Id == 0)
        {
            await JsRuntime.InvokeVoidAsync("KTSummernote.init", DotNetObjectReference.Create(this));
        }

    }

    [JSInvokable]
    public void GetSummerNoteValue(string data)
    {
        _quest.Description = data;
        StateHasChanged();
    }

    

    private async void HandleValidSubmit()
    {
        _quest.TravelTime = _time;

        if (Id != 0)
        {
            await QuestDataService.Update(_quest,_quest.Img);
        }
        else
        {
            await QuestDataService.Add(_quest,_quest.Img);
        }
    }



    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            _quest = await QuestDataService.Get(Id);
            StateHasChanged();
            await JsRuntime.InvokeVoidAsync("KTSummernote.init", DotNetObjectReference.Create(this));

        }
    }
    
    

}
