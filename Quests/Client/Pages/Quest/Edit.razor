@page "/quest/edit/{Id:int}"
@page "/quest/edit"

@using Quests.Client.Services
@using Quests.Shared.Entities.Models
@using CurrieTechnologies.Razor.SweetAlert2

@inject IJSRuntime JsRuntime
@inject IQuestDataService QuestDataService
@inject SweetAlertService _sweetAlertService



<div class="card card-custom gutter-b example example-compact">
    <div class="card-header">
        <h3 class="card-title">Редактирование Квеста</h3>
        <div class="card-toolbar">
            <div class="example-tools justify-content-center">

            </div>
        </div>
    </div>
    <!--begin::Form-->
    <EditForm Model="_quest" class="form" OnValidSubmit="@HandleValidSubmit">
        <div class="card-body">
            <div class="mb-15">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Категория</label>
                    <div class="col-lg-6">
                        <div class="input-group">
                            <InputSelect @bind-Value="CategoryId" class="form-control">
                                @foreach (var item in _questCategories)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </InputSelect>
                            <div class="input-group-append">
                                <button class="btn btn-primary ml-1 mr-1" type="button" @onclick="AddQuestCategory"><span class="la la-plus"></span></button>
                                <button class="btn btn-danger mr-1" type="button" @onclick="DeleteQuestCategory"><span class="la la-trash"></span></button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <input type="hidden" @bind-value="@_quest.Id" />
                    <label class="col-lg-3 col-form-label">Название:</label>
                    <div class="col-lg-6">
                        <InputText class="form-control" placeholder="Название" @bind-Value="_quest.Name" />
                        <span class="form-text text-muted">Введите название квеста</span>
                        <ValidationMessage For="@(() => _quest.Name)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Город:</label>
                    <div class="col-lg-6">
                        <InputText type="text" class="form-control" placeholder="Город" @bind-Value="_quest.City" />
                        <span class="form-text text-muted">Введите город где будет проходить квест</span>
                        <ValidationMessage For="@(() => _quest.City)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Описание квеста:</label>
                    <div class="col-lg-6">
                        <InputSummerNote @bind-Text="_quest.Description"></InputSummerNote>
                        <span class="form-text text-muted">Введите описание квеста</span>
                        <ValidationMessage For="@(() => _quest.Description)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Изображение:</label>
                    <div class="col-lg-6">
                        <InputImageCropper @bind-Image="@img" OldImage="@_quest.Img"></InputImageCropper>
                        <ValidationMessage For="@(() => _quest.Img)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Цена:</label>
                    <div class="col-lg-2">
                        <InputNumber class="form-control" placeholder="Цена" @bind-Value="_quest.Price" />
                        <span class="form-text text-muted">Введите цену квеста</span>
                        <ValidationMessage For="@(() => _quest.Price)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Дистанция в метрах:</label>
                    <div class="col-lg-2">
                        <InputNumber class="form-control" placeholder="Цена" @bind-Value="_quest.Distance" />
                        <span class="form-text text-muted">Дистанция в метрах</span>
                        <ValidationMessage For="@(() => _quest.Distance)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Общее время прохождения:</label>
                    <div class="col-lg-2">
                        <input class="form-control" placeholder="Общее время прохождения" type="time" @bind="@_quest.TravelTime" @bind:format="HH:mm:ss" />
                        <span class="form-text text-muted">Введите общее время прохождения</span>
                        <ValidationMessage For="@(() => _quest.TravelTime)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Код карты (Iframe):</label>
                    <div class="col-lg-6">
                        <InputTextArea class="form-control" placeholder="HTML Iframe" type="time" @bind-Value="_quest.MapCode" />
                        <span class="form-text text-muted">Вставьте код IFRAME </span>
                        <ValidationMessage For="@(() => _quest.MapCode)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-lg-3 col-form-label">Код видео (Iframe):</label>
                    <div class="col-lg-6">
                        <InputTextArea class="form-control" placeholder="HTML Iframe" type="time" @bind-Value="_quest.VideoCode" />
                        <span class="form-text text-muted">Вставьте код IFRAME </span>
                        <ValidationMessage For="@(() => _quest.VideoCode)" />
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col-lg-3"></div>
                <div class="col-lg-6">
                    <button type="submit" class="btn btn-success mr-2">Сохранить</button>
                    <button type="reset" class="btn btn-secondary">Отмена</button>
                </div>
            </div>
        </div>
    </EditForm>
    <!--end::Form-->
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private Quest _quest = new Quest();
    private List<QuestCategory> _questCategories = new List<QuestCategory>();
    private string CategoryId { get; set; }
    private string img = "";

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();

        if (Id != 0)
        {
            _quest = await QuestDataService.Get(Id);
            CategoryId = _quest.QuestCategoryId.ToString();

            StateHasChanged();
            await JsRuntime.InvokeVoidAsync("KTSummernote.init", DotNetObjectReference.Create(this));

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Id == 0)
        {
            await JsRuntime.InvokeVoidAsync("KTSummernote.init", DotNetObjectReference.Create(this));
        }

    }

    [JSInvokable]
    public void GetSummerNoteValue(string data)
    {
        _quest.Description = data;
        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        _quest.QuestCategoryId = Convert.ToInt32(CategoryId);

        if (Id != 0)
        {
            await QuestDataService.Update(_quest, img);
        }
        else
        {
            await QuestDataService.Add(_quest, img);
        }
    }

    private async void AddQuestCategory()
    {
        await _sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Добавление категории",
            InputPlaceholder = "Введите название категории",
            Icon = SweetAlertIcon.Info,
            ShowCancelButton = true,
            ConfirmButtonText = "Добавить категорию!",
            CancelButtonText = "Отмена",
            Input = "text",
        }).ContinueWith(swalTask =>
       {
           SweetAlertResult result = swalTask.Result;
           if (!string.IsNullOrEmpty(result.Value))
           {
               var questCategory = new QuestCategory
               {
                   Id = 0,
                   Name = result.Value,
               };
               QuestDataService.AddQuestCategory(questCategory).ContinueWith(r =>
               {
                   GetCategories().ContinueWith(x =>
                   {
                       CategoryId = r.Result.Id.ToString();
                       StateHasChanged();

                   });

               });

           }
           else if (result.Dismiss == DismissReason.Cancel)
           {

               _sweetAlertService.FireAsync(
                  "Отмена",
                  "Добавление категории было отменено",
                  SweetAlertIcon.Error

                  );
           }
       });

    }

    private async Task GetCategories()
    {
        _questCategories = await QuestDataService.GetAllQuestCategories();
        CategoryId = _questCategories.FirstOrDefault().Id.ToString();
        StateHasChanged();

    }

    private async void DeleteQuestCategory()
    {
        await _sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Вы уверены?",
            Text = "Вы не сможете восстановить эту категорию!",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Да, удалить категорию!",
            CancelButtonText = "Нет, отменить удаление"
        }).ContinueWith(swalTask =>
        {
            SweetAlertResult result = swalTask.Result;
            if (!string.IsNullOrEmpty(result.Value))
            {
                
                QuestDataService.DeleteQuestCategory(Convert.ToInt32(CategoryId)).ContinueWith(x =>
                {
                    GetCategories().ContinueWith(r =>
                    {
                        StateHasChanged();
                    });
                });

            }
            else if (result.Dismiss == DismissReason.Cancel)
            {
                _sweetAlertService.FireAsync(
                    "Отмена",
                    "Удаление категории было отменено",
                    SweetAlertIcon.Error
                    );
            }
        });
    }
}
