@page "/instructions"
@inject IInstructionsDataService InstructionsDataService
@inject IJSRuntime JsRuntime
@using System.Threading
@using Quests.Client.Services
@using Quests.Shared.Entities.Models



@if (InstructionsVm.Count == 0)
{
    <div class="offset-xl-2 col-xl-8">
        <!--begin::Engage Widget 7-->
        <div class="card card-custom card-stretch gutter-b">
            <div class="card-body d-flex p-0">
                <div class="flex-grow-1 p-12 card-rounded bgi-no-repeat d-flex flex-column justify-content-center align-items-start" style="background-color: #FFF4DE; background-position: right bottom; background-size: auto 100%; background-image: url(/assets/media/svg/humans/custom-8.svg)">
                    <h4 class="text-danger font-weight-bolder m-0">Инструкции отсутствуют</h4>
                    <p class="text-dark-50 my-5 font-size-xl font-weight-bold">В скором времени инструкции обязательно появятся.</p>
                </div>
            </div>
        </div>
        <!--end::Engage Widget 7-->
    </div>
}
else
{
    <div class="card card-custom gutter-b">
        <div class="card-body">
            <div class="input-icon">
                <input type="text" class="form-control" placeholder="Поиск..." @bind-value="@SearchTerm" @bind-value:event="oninput" @onkeyup="SearchChanged" />
                <span><i class="flaticon2-search-1 text-muted"></i></span>
            </div>
        </div>
    </div>

    <div class="row">

        @foreach (var item in InstructionsVm)
        {

            var linkEdit = "/instructions/edit/" + @item.Id;
            var linkShow = "/instructions/details/" + @item.Id;

            <div class="col-6">
                <div class="card card-custom w-auto  w-lg-auto  ml-auto m-10">
                    <!--begin::Card Body-->
                    <div class="card-body px-12 py-10">
                        <h3 class="font-weight-bolder font-size-h2 mb-1"><a href="@linkShow" class="text-dark-75">@item.Title</a></h3>
                    </div>
                    <!--end::Card Body-->
                    <div class="card-footer d-flex justify-content-between">
                        <AuthorizeView Roles="Member">
                            <NavLink href="@linkShow" class="btn btn-primary btn-shadow btn-block">Подробно...</NavLink>
                        </AuthorizeView>
                        <AuthorizeView Roles="Admin">
                            <NavLink class="btn btn-primary btn-shadow btn-icon mr-2" href="@linkShow"><i class="flaticon2-information"></i></NavLink>
                            <NavLink class="btn btn-warning btn-shadow btn-icon mr-2" href="@linkEdit"><i class="flaticon2-gear"></i></NavLink>
                            <button class="btn btn-danger btn-shadow btn-icon mr-2" @onclick="@(() => DeleteNews(item.Id))"><i class="flaticon2-trash"></i></button>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        }



    </div>
}


@code {

    private Timer _timer;
    public string SearchTerm { get; set; }

    public List<Instruction> Instructions { get; set; } = new List<Instruction>();
    public List<Instruction> InstructionsVm { get; set; } = new List<Instruction>();
    protected override async Task OnInitializedAsync()
    {
        await GetNewsRecords();
        StateHasChanged();
    }

    async Task GetNewsRecords()
    {
        Instructions = await InstructionsDataService.Get();
        InstructionsVm = Instructions;
    }

    private void SearchChanged()
    {
        _timer?.Dispose();
        _timer = new Timer(OnTimerElapsed, null, 500, 0);
    }


    private void OnTimerElapsed(object sender)
    {
        InstructionsVm = Instructions.Where(t =>
    t.Title.Contains(SearchTerm) ||
    t.Description.Contains(SearchTerm)).ToList();

        _timer.Dispose();
        StateHasChanged();
    }

    private async Task DeleteNews(int id)
    {
        var result = await InstructionsDataService.Delete(id);
        if (result)
        {
            await GetNewsRecords();
        }
    }
}
